
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from tabulate import tabulate

# Example dataset
data = {
    'Hours_Studied': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Marks_Scored': [30, 35, 50, 55, 65, 70, 75, 80, 88, 95]
}
df = pd.DataFrame(data)

# Print full dataset
print("Full Dataset:")
print(tabulate(df, headers='keys', tablefmt='psql', showindex=False))

# Features and target
X = df[['Hours_Studied']]
y = df['Marks_Scored']

# Split into train/test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Print test sample
print("\nTest Sample:")
test_sample = pd.concat([X_test, y_test], axis=1)
print(tabulate(test_sample, headers='keys', tablefmt='psql', showindex=False))

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Print predictions table
print("\nPredictions on Test Data:")
pred_table = pd.DataFrame({
    'Hours_Studied': X_test['Hours_Studied'],
    'Actual_Marks': y_test,
    'Predicted_Marks': np.round(y_pred, 2)
})
print(tabulate(pred_table, headers='keys', tablefmt='psql', showindex=False))

# Model evaluation
print("\nModel Evaluation:")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred):.2f}")
print(f"R² Score: {r2_score(y_test, y_pred):.2f}")

# Custom input prediction
custom_hours = float(input("\nEnter study hours to predict marks: "))
custom_input = pd.DataFrame({'Hours_Studied': [custom_hours]})
custom_prediction = model.predict(custom_input)
print(f"Predicted marks for studying {custom_hours} hours: {custom_prediction[0]:.2f}")

# Prepare regression line data
x_range = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)
regression_line = model.predict(pd.DataFrame(x_range, columns=['Hours_Studied']))

# Plot actual test data, regression line and custom prediction
plt.figure(figsize=(10, 7))
plt.scatter(X_test, y_test, color='green', label='Actual Marks (Test Data)', s=100)
plt.plot(x_range, regression_line, color='red', label='Regression Line')
plt.scatter(custom_hours, custom_prediction, color='purple', s=150, edgecolor='black', label='Custom Prediction')
plt.annotate(f'{custom_prediction[0]:.2f}',
             (custom_hours, custom_prediction),
             textcoords="offset points",
             xytext=(0,10),
             ha='center', fontsize=10, fontweight='bold')

plt.xlabel("Hours Studied")
plt.ylabel("Marks Scored")
plt.title("Actual Test Data, Regression Line and Custom Prediction")
plt.legend()
plt.grid(True)
plt.show()


Output:

Full Dataset:
+-----------------+----------------+
|   Hours_Studied |   Marks_Scored |
|-----------------+----------------|
|               1 |             30 |
|               2 |             35 |
|               3 |             50 |
|               4 |             55 |
|               5 |             65 |
|               6 |             70 |
|               7 |             75 |
|               8 |             80 |
|               9 |             88 |
|              10 |             95 |
+-----------------+----------------+

Test Sample:
+-----------------+----------------+
|   Hours_Studied |   Marks_Scored |
|-----------------+----------------|
|               9 |             88 |
|               2 |             35 |
+-----------------+----------------+

Predictions on Test Data:
+-----------------+----------------+-------------------+
|   Hours_Studied |   Actual_Marks |   Predicted_Marks |
|-----------------+----------------+-------------------|
|               9 |             88 |             89.14 |
|               2 |             35 |             40.86 |
+-----------------+----------------+-------------------+

Model Evaluation:
Mean Squared Error: 17.83
R² Score: 0.97

Enter study hours to predict marks: 11
Predicted marks for studying 11.0 hours: 102.93

